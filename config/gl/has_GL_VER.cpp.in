/**
 *  Copyright 2010-2014 Matus Chochlik. Distributed under the Boost
 *  Software License, Version 1.0. (See accompanying file
 *  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 */
// clang-format off
#define OGLPLUS_CONFIG_QUERY_GL_VER_MAJOR @OGLPLUS_CONFIG_QUERY_GL_VER_MAJOR@
#define OGLPLUS_CONFIG_QUERY_GL_VER_MINOR @OGLPLUS_CONFIG_QUERY_GL_VER_MINOR@
// clang-format on

#include "init_GL.ipp"

bool do_query_gl() {
    // clang-format off
#if !@OGLPLUS_CONFIG_STRICT_VERSION_CHECK@
    // clang-format on
    std::cout << "Skipping strict version check" << std::endl;
    return true;
    // clang-format off
#elif !defined @OGLPLUS_CONFIG_QUERY_GL_VER@
    // clang-format on
    std::cerr << "@OGLPLUS_CONFIG_QUERY_GL_VER@ not defined!" << std::endl;
    return false;
    // clang-format off
#elif !@OGLPLUS_CONFIG_QUERY_GL_VER@
    // clang-format on
    std::cerr << "@OGLPLUS_CONFIG_QUERY_GL_VER@ is zero!" << std::endl;
    return false;
#else
    // clang-format off
	GLint req_major = @OGLPLUS_CONFIG_QUERY_GL_VER_MAJOR@;
	GLint req_minor = @OGLPLUS_CONFIG_QUERY_GL_VER_MINOR@;
    // clang-format on
    std::cout << "Detecting GL version: " << req_major << "." << req_minor
              << std::endl;

    GLint sup_major = 0;
    GLint sup_minor = 0;
    glGetIntegerv(GL_MAJOR_VERSION, &sup_major);
    glGetIntegerv(GL_MINOR_VERSION, &sup_minor);

    if(sup_major < req_major) {
        std::cerr << "Supported major version: " << sup_major
                  << " is less than required: " << req_major << std::endl;
        return false;
    }
    if((sup_major == req_major) && (sup_minor < req_minor)) {
        std::cerr << "Supported minor version: " << sup_major
                  << " is less than required: " << req_major << std::endl;
        return false;
    }
    unsigned missing_gl_symbols = 0;
#include "assert_GL_VER_symbols.ipp"
    return missing_gl_symbols == 0;
#endif
}
